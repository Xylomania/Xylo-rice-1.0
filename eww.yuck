(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(deflisten workspaces_listen "./scripts/getworkspace")

(defwidget workspaces []
  (literal :content workspaces_listen))


(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ï€¨"
            :value volume
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
    (metric :label "ï‚ "
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "ïˆ€"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    time))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 100
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M'")

(defwindow bar
  :monitor 0
  :windowtype "desktop"
  :geometry (geometry :x "0%"
                      :y "1.2%"
                      :width "60%"
                      :height "5px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4.8%")
  (bar))

; Who needs notes anyways

